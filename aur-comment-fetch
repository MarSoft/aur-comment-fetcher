#!/usr/bin/env python
import AUR
import click
import requests
import textwrap
from bs4 import BeautifulSoup

BASE_URL = 'https://aur.archlinux.org/packages/'

class Comment(object):
    def __init__(self,author,timestamp,content):
        self.author = author
        self.timestamp = timestamp
        self.content = content


def query(package):
    query = AUR.RPC.aur_query('search',package)[0]
    if len(query) == 0:
        raise click.ClickException('couldn\'t find any package with name "{0}"'
                        .format(package))
    elif len(query) > 1:
        # test if the exact name is under the found then we won't ask
        if package in [x['Name'] for x in query]:
            return package
        for i,x in enumerate(query):
            print('\033[33m\033[1m{0}\033[0m: \033[33m{1} \033[32m{2}'
                  .format(i,x['Name'],x['Version']))
            print('\t\033[0m{0}'.format(x['Description']))
        number = click.prompt('\nspecify the number of the package', type=int)
        return query[number]['Name']
    else:
        return package

def get(package):
    res = requests.get(BASE_URL+package+'/?comments=all',verify=True)
    if res.status_code != 200:
        res = requests.get(BASE_URL+query(package)+'/?comments=all',verify=True)
        if res.status_code != 200:
            raise click.ClickException('couldn\'t fetch comments for package "{0}"'
                            .format(package))
    return res

def fetch_comments(package,number=5,get_all=False):
    res = get(package)
    soup = BeautifulSoup(res.content)
    news = soup.find('div',attrs={'id':'news'})
    if not news:
        return package,[]
    authors = news.findAll('h4')
    timestamps = news.findAll('p',attrs={'class':'timestamp'})
    contents = news.findAll('div',attrs={'class':'article-content'})
    comments = []
    i = 0
    for author,timestamp,content in zip(authors,timestamps,contents):
        if not get_all and i >= number:
            return package,comments
        comments.append(Comment(author.text.strip(),
            timestamp.text.strip(),content.text.strip()))
        i += 1

    return package,comments

@click.command()
@click.argument('package')
@click.option('-a','--all','get_all',is_flag=True,help='fetch all comments')
@click.option('-n','--number',type=int,default=5,help='specify number of comments to fetch')
@click.option('-r','--reverse','reverse_order',is_flag=True,help='show comments in reversed order')
def main(package,get_all,number,reverse_order):
    package,comments = fetch_comments(package,number=number,get_all=get_all)
    if len(comments) == 0:
        print('\033[31m\nno comments available for package "{0}"\n full info at {1}\n\033[0m'
            .format(package,BASE_URL+package))
        return
    else:
        print('\033[35m\nLast {1} comments for package "{0}"{3}:\n full info at {2}\n\033[0m'
            .format(package,number,BASE_URL+package,' (most recent last)' if reverse_order else ''))
    for comment in (reversed(comments) if reverse_order else comments):
        print('\033[33m{0}: {1}\033[0m'.format(comment.timestamp,comment.author))
        print(textwrap.fill(comment.content,initial_indent='  ',subsequent_indent='  '))


if __name__ == '__main__':
    main()
